{"version":3,"sources":["config.json","helpers/index.ts","modules/Vec2.ts","modules/Background.ts","modules/GameObject.ts","modules/Bullet.ts","modules/Player.ts","modules/Screen.ts","modules/Enemy.ts","modules/FontRenderer.ts","images/font.json","images/spritesheet.json","modules/Sprite.ts","modules/Game.ts","index.ts"],"names":["module","exports","width","height","title","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","player","enemy"],"mappings":"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","file":"src.ba3dcd50.js","sourceRoot":"../src","sourcesContent":["module.exports={width:255,height:240,title:\"SpaceShooter\"};","import config from '../config.json'\n\nconst screen = {\n  size: {\n    x: config.width,\n    y: config.height\n  }\n}\n\nexport function checkBoundsCollide(obj, boundBox = screen) {\n  return obj.pos.x >= 0 && obj.pos.x <= boundBox.size.x && obj.pos.y >= 0 && obj.pos.y <= boundBox.size.y\n}\n","export class Vec2 {\n  constructor(public x: number, public y: number) {}\n\n  set(x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n","import { checkBoundsCollide } from '../helpers'\nimport { Vec2 } from './Vec2'\n\nclass Star {\n  public active: boolean\n  vel: Vec2\n  color: string\n\n  constructor(public pos: Vec2, public speed: number = 1, public size) {\n    this.active = true\n    this.vel = new Vec2(0, 1)\n    this.color = `rgba(255, 255, 255, ${this.speed / 2})`\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color\n    const circle = new Path2D()\n    circle.arc(this.pos.x, this.pos.y, this.size.x, 0, 2 * Math.PI)\n\n    ctx.fill(circle)\n  }\n\n  update() {\n    this.pos.y += this.vel.y * this.speed\n    this.active = this.active && checkBoundsCollide(this)\n  }\n}\n\nexport default class Background {\n  color: string\n  stars: any[]\n  constructor() {\n    this.color = 'black'\n    this.stars = []\n  }\n\n  drawStars(ctx) {\n    const random = Math.floor(Math.random() * Math.floor(10))\n    const speed = random\n    const size = new Vec2(2 / speed, 5 / speed)\n    const position = new Vec2(Math.floor(Math.random() * ctx.canvas.width), 0)\n\n    if (Math.round(Math.random() * 5) === 1) {\n      this.stars.push(new Star(position, speed, size))\n    }\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    this.drawStars(ctx)\n    this.stars.map((star) => {\n      star.draw(ctx)\n    })\n  }\n\n  update() {\n    this.stars.map((star) => {\n      star.update()\n    })\n\n    this.stars = this.stars.filter((star) => star.active)\n  }\n}\n","import { SpriteProps } from '../types'\nimport { Sprite } from './Sprite'\nimport { Vec2 } from './Vec2'\n\nexport default class GameObject {\n  active: boolean\n  canvas: HTMLCanvasElement\n  image: HTMLImageElement\n  vel: Vec2\n\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    public pos: Vec2,\n    public sprite: Sprite,\n    public size: Vec2 = new Vec2(16, 16)\n  ) {\n    this.canvas = ctx.canvas\n    this.image = new Image()\n    this.pos = new Vec2(pos.x, pos.y)\n    this.active = true\n  }\n\n  isBounds() {\n    return (\n      this.pos.x >= 0 &&\n      this.pos.x <= this.canvas.width &&\n      this.pos.y >= 0 &&\n      this.pos.y <= this.canvas.height\n    )\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.sprite, this.pos.x, this.pos.y)\n  }\n\n  explode() {\n    this.active = false\n  }\n\n  update() {\n    this.pos.x += this.vel.x\n    this.pos.y += this.vel.y / 2\n  }\n}\n","import { Vec2 } from './Vec2'\n\nexport default class Bullet {\n  public active: boolean\n  pos: Vec2\n  size: Vec2\n  vel: Vec2\n\n  constructor(x, y) {\n    this.active = true\n    this.pos = new Vec2(x, y)\n    this.size = new Vec2(1, 3)\n    this.vel = new Vec2(0, -5)\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = 'orange'\n    ctx.fillRect(this.pos.x, this.pos.y, this.size.x, this.size.y + 3)\n  }\n\n  update() {\n    this.pos.x += this.vel.x\n    this.pos.y += this.vel.y\n  }\n}\n","import GameObject from './GameObject'\nimport Bullet from './Bullet'\nimport { Vec2 } from './Vec2'\nimport { SpriteProps } from '../types'\nimport { Sprite } from './Sprite'\n\nclass Player extends GameObject {\n  color: string\n  width: number\n  height: number\n  active: boolean\n  playerBullets: any[]\n  vel: Vec2\n\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    public pos: Vec2 = new Vec2(0, 0),\n    public sprite: Sprite\n  ) {\n    super(ctx, pos, sprite, new Vec2(16, 16))\n    this.active = true\n    this.playerBullets = []\n    this.vel = new Vec2(0, 0)\n  }\n\n  // Bullet starts in the center of the player\n  moveToMidpoint() {\n    return {\n      x: this.pos.x + this.size.x / 2,\n      y: this.pos.y\n    }\n  }\n\n  shoot() {\n    let bulletPosition = this.moveToMidpoint()\n\n    this.playerBullets.push(new Bullet(bulletPosition.x, bulletPosition.y))\n  }\n\n  explode() {\n    this.active = false\n  }\n\n  update() {\n    this.pos.x += this.vel.x\n    this.pos.y += this.vel.y\n  }\n}\n\nexport default Player\n","import { ScreenProps, SizeProps } from '../types'\nimport { Vec2 } from './Vec2'\n\nexport default class Screen implements ScreenProps {\n  canvas: HTMLCanvasElement\n  ctx: CanvasRenderingContext2D\n\n  constructor(public size: Vec2 = new Vec2(255, 240)) {\n    this.canvas = document.createElement('canvas')\n    this.ctx = this.canvas.getContext('2d')\n    this.canvas.width = this.size.x\n    this.canvas.height = this.size.y\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.size.x, this.size.y)\n  }\n\n  mount() {\n    const container: HTMLDivElement = document.createElement('div')\n    container.setAttribute('id', 'screen')\n    container.append(this.canvas)\n    document.body.append(container)\n  }\n}\n","import { SpriteProps } from '../types'\nimport GameObject from './GameObject'\nimport { Sprite } from './Sprite'\nimport { Vec2 } from './Vec2'\n\nclass Enemy extends GameObject {\n  vel: Vec2\n  age: number\n\n  constructor(ctx, pos, sprite: Sprite) {\n    super(ctx, pos, sprite, new Vec2(16, 16))\n    this.age = Math.floor(Math.random() * 128)\n    this.pos.x = Math.round(\n      ctx.canvas.width / 4 + (Math.random() * ctx.canvas.width) / 2\n    )\n    this.vel = new Vec2(0, 3)\n  }\n\n  explode() {\n    this.active = false\n  }\n\n  update() {\n    this.pos.x += this.vel.x\n    this.pos.y += this.vel.y / 2\n\n    this.vel.x = 3 * Math.sin((this.age * Math.PI) / 64)\n\n    this.age++\n\n    this.active = this.active && this.isBounds()\n  }\n}\n\nexport default Enemy\n","import { Sprite } from './Sprite'\nimport { Vec2 } from './Vec2'\n\nexport default class FontRenderer {\n  image: HTMLImageElement\n\n  constructor(\n    public font: HTMLImageElement,\n    public fontsheet: any,\n    public position: Vec2 = new Vec2(0, 0),\n    public size: Vec2 = new Vec2(8, 8)\n  ) {}\n\n  private getPosition(name) {\n    const el = this.fontsheet[name] || [0, 0]\n    return new Vec2(el[0], el[1])\n  }\n\n  drawText(ctx, message, position: Vec2 = new Vec2(0, 0)) {\n    let xOffset: number = 0\n    let yOffset: number = 0\n\n    message.split('').forEach((char: string) => {\n      const pos = this.getPosition(char)\n      ctx.drawImage(\n        this.font,\n        pos.x,\n        pos.y,\n        this.size.x,\n        this.size.y,\n        position.x + this.position.x + xOffset,\n        position.y + this.position.y,\n        this.size.x,\n        this.size.y\n      )\n      xOffset += this.size.x\n    })\n  }\n}\n","module.exports={A:[8,0],B:[16,0],C:[24,0],D:[32,0],E:[40,0],F:[48,0],G:[56,0],H:[64,0],I:[72,0],J:[80,0],K:[88,0],L:[96,0],M:[104,0],N:[112,0],O:[120,0],P:[0,8],Q:[8,8],R:[16,8],S:[24,8],T:[32,8],U:[40,8],V:[48,8],W:[56,8],X:[80,8],Y:[80,8],Z:[80,8],0:[0,16],1:[8,16],2:[16,16],3:[24,16],4:[32,16],5:[40,16],6:[48,16],7:[56,16],8:[64,16],9:[72,16]};","module.exports={player:[0,0],enemy:[16,0]};","import { Vec2 } from './Vec2'\n\nexport class Sprite {\n  img: HTMLImageElement\n  canvas: HTMLCanvasElement\n  ctx: CanvasRenderingContext2D\n  // sprite: HTMLImageElement\n\n  constructor(\n    public image,\n    public name,\n    public spritesheet,\n    public size: Vec2 = new Vec2(16, 16)\n  ) {\n    this.canvas = document.createElement('canvas')\n\n    // Set canvas size\n    this.canvas.width = this.size.x\n    this.canvas.height = this.size.y\n\n    // Get context\n    this.ctx = this.canvas.getContext('2d')\n\n    const pos = this.getPosition()\n    // Draw image on the canvas\n    this.ctx.drawImage(\n      this.image,\n      pos.x,\n      pos.y,\n      this.size.x,\n      this.size.y,\n      0,\n      0,\n      this.size.x,\n      this.size.y\n    )\n\n    this.sprite = this.canvas\n  }\n\n  private getPosition() {\n    const el = this.spritesheet[this.name] || [0, 0]\n    return new Vec2(el[0], el[1])\n  }\n}\n","import Background from './Background'\nimport Player from './Player'\nimport UI from './UI'\nimport Screen from './Screen'\nimport Enemy from './Enemy'\nimport FontRenderer from './FontRenderer'\nimport { GameConfigProps } from '../types'\nimport { checkBoundsCollide } from '../helpers'\n\nimport font from '../images/font.png'\nimport fontsheet from '../images/font.json'\n\nimport sprite from '../images/spritesheet.png'\nimport spritejson from '../images/spritesheet.json'\n\nimport { Vec2 } from './Vec2'\nimport { Sprite } from './Sprite'\n\nconst level = {}\n\nconst interval = (cb) => setInterval(cb, 1000)\nconst count = 0\n\nexport default class Game {\n  screen: Screen\n  level: any\n  ui: HTMLDivElement\n  enemies: Enemy[]\n  score: number\n  bg: any\n  player: Player\n  fontRenderer: FontRenderer\n  sprite: HTMLImageElement\n  loaded: number\n\n  constructor(private config: GameConfigProps) {\n    this.level = level\n    this.ui = document.createElement('div')\n    this.screen = new Screen(new Vec2(this.config.width, this.config.height))\n    this.ui.className = 'ui'\n    this.initKeyboardController()\n    this.enemies = []\n    this.score = 0\n    this.bg = new Background()\n\n    this.sprite = new Image()\n    this.sprite.src = sprite\n\n    this.font = new Image()\n    this.font.src = font\n\n    this.loaded = 0\n\n    this.player = null\n    this.fontRenderer = null\n\n    this.sprite.onload = () => {\n      // Sprite loaded\n      this.loaded++\n\n      this.font.onload = () => {\n        // Font loaded\n        this.loaded++\n\n        this.fontRenderer = new FontRenderer(\n          this.font,\n          fontsheet,\n          new Vec2(8, 8)\n        )\n      }\n\n      this.player = new Player(\n        this.screen.ctx,\n        new Vec2(this.screen.size.x / 2, this.screen.size.y - 48),\n        new Sprite(this.sprite, 'player', spritejson, new Vec2(16, 16)).sprite\n      )\n    }\n\n    console.log(this)\n  }\n\n  initKeyboardController() {\n    document.addEventListener('keydown', (event) => {\n      switch (event.code) {\n        case 'KeyW':\n        case 'ArrowUp':\n          this.player.pos.y -= 8\n          break\n        case 'KeyA':\n        case 'ArrowLeft':\n          this.player.pos.x -= 8\n          break\n        case 'KeyS':\n        case 'ArrowDown':\n          this.player.pos.y += 8\n          break\n        case 'KeyD':\n        case 'ArrowRight':\n          this.player.pos.x += 8\n          break\n        case 'Space':\n          this.player.shoot()\n          break\n      }\n    })\n  }\n\n  init() {\n    this.initKeyboardController()\n    this.screen.mount()\n    this.run()\n  }\n\n  isCollide(a, b) {\n    return (\n      a.pos.x < b.pos.x + b.size.x &&\n      a.pos.x + a.size.x > b.pos.x &&\n      a.pos.y < b.pos.y + b.size.y &&\n      a.pos.y + a.size.y > b.pos.y\n    )\n  }\n\n  handleCollision() {\n    this.player.playerBullets.map((bullet) => {\n      this.enemies.map((enemy) => {\n        if (this.isCollide(bullet, enemy)) {\n          enemy.explode()\n          this.score += 100\n          bullet.active = false\n        }\n      })\n    })\n\n    this.enemies.map((enemy) => {\n      if (this.isCollide(enemy, this.player)) {\n        enemy.explode()\n        this.player.explode()\n      }\n    })\n  }\n\n  draw(screen) {\n    screen.clear()\n\n    // this.fontRenderer.drawText(screen.ctx, 'A')\n    this.bg.draw(screen.ctx)\n    this.player.draw(screen.ctx)\n\n    this.enemies.map((enemy) => {\n      enemy.draw(screen.ctx)\n    })\n\n    this.player.playerBullets.map((bullet) => {\n      bullet.draw(screen.ctx)\n    })\n    this.fontRenderer.drawText(\n      screen.ctx,\n      `SCORE ${this.score.toString()}`,\n      new Vec2(8, 8)\n    )\n  }\n\n  update() {\n    // Screen collision\n    if (this.player.pos.x + this.player.size.x > this.screen.size.x) {\n      this.player.pos.x = this.screen.size.x - this.player.size.x\n    }\n    if (this.player.pos.x < 0) {\n      this.player.pos.x = 0\n    }\n    if (this.player.pos.y + this.player.size.y > this.screen.size.y) {\n      this.player.pos.y = this.screen.size.x - this.player.size.y\n    }\n    if (this.player.pos.y < 0) {\n      this.player.pos.y = 0\n    }\n\n    this.ui.textContent = this.score.toString()\n\n    this.handleCollision()\n\n    this.player.playerBullets.map((bullet) => {\n      if (!checkBoundsCollide(bullet)) {\n        bullet.active = false\n      } else {\n        bullet.update()\n      }\n    })\n\n    this.enemies.map((enemy) => enemy.update())\n\n    this.bg.update()\n\n    this.enemies = this.enemies.filter((enemy) => enemy.active)\n    this.player.playerBullets = this.player.playerBullets.filter(\n      (bullet) => bullet.active\n    )\n\n    if (Math.round(Math.random() * 90) == 1) {\n      this.enemies.push(\n        new Enemy(\n          this.screen.ctx,\n          { x: 0, y: 0 },\n          new Sprite(this.sprite, 'enemy', spritejson, new Vec2(16, 16)).sprite\n        )\n      )\n    }\n  }\n\n  run() {\n    if (this.loaded === 2) {\n      this.draw(this.screen)\n      this.update()\n    }\n\n    requestAnimationFrame(() => this.run())\n  }\n}\n","import Game from './modules/Game'\nimport { GameConfigProps, GameProps } from './types'\nimport config from './config.json'\n\nconst game: Game = new Game(config)\n\ngame.init()\n"]}